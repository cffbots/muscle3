// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: muscle_manager_protocol/muscle_manager_protocol.proto

#include "muscle_manager_protocol/muscle_manager_protocol.pb.h"
#include "muscle_manager_protocol/muscle_manager_protocol.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace muscle_manager_protocol {

static const char* MuscleManager_method_names[] = {
  "/muscle_manager_protocol.MuscleManager/SubmitLogMessage",
  "/muscle_manager_protocol.MuscleManager/SubmitProfileEvents",
  "/muscle_manager_protocol.MuscleManager/RequestSettings",
  "/muscle_manager_protocol.MuscleManager/RegisterInstance",
  "/muscle_manager_protocol.MuscleManager/RequestPeers",
  "/muscle_manager_protocol.MuscleManager/DeregisterInstance",
};

std::unique_ptr< MuscleManager::Stub> MuscleManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MuscleManager::Stub> stub(new MuscleManager::Stub(channel));
  return stub;
}

MuscleManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SubmitLogMessage_(MuscleManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitProfileEvents_(MuscleManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestSettings_(MuscleManager_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterInstance_(MuscleManager_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestPeers_(MuscleManager_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeregisterInstance_(MuscleManager_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MuscleManager::Stub::SubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::muscle_manager_protocol::LogResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SubmitLogMessage_, context, request, response);
}

void MuscleManager::Stub::experimental_async::SubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage* request, ::muscle_manager_protocol::LogResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubmitLogMessage_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::SubmitLogMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::LogResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubmitLogMessage_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::SubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage* request, ::muscle_manager_protocol::LogResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubmitLogMessage_, context, request, response, reactor);
}

void MuscleManager::Stub::experimental_async::SubmitLogMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::LogResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubmitLogMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::LogResult>* MuscleManager::Stub::AsyncSubmitLogMessageRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::LogResult>::Create(channel_.get(), cq, rpcmethod_SubmitLogMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::LogResult>* MuscleManager::Stub::PrepareAsyncSubmitLogMessageRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::LogResult>::Create(channel_.get(), cq, rpcmethod_SubmitLogMessage_, context, request, false);
}

::grpc::Status MuscleManager::Stub::SubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::muscle_manager_protocol::ProfileResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SubmitProfileEvents_, context, request, response);
}

void MuscleManager::Stub::experimental_async::SubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile* request, ::muscle_manager_protocol::ProfileResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubmitProfileEvents_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::SubmitProfileEvents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::ProfileResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubmitProfileEvents_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::SubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile* request, ::muscle_manager_protocol::ProfileResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubmitProfileEvents_, context, request, response, reactor);
}

void MuscleManager::Stub::experimental_async::SubmitProfileEvents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::ProfileResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubmitProfileEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::ProfileResult>* MuscleManager::Stub::AsyncSubmitProfileEventsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::ProfileResult>::Create(channel_.get(), cq, rpcmethod_SubmitProfileEvents_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::ProfileResult>* MuscleManager::Stub::PrepareAsyncSubmitProfileEventsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::ProfileResult>::Create(channel_.get(), cq, rpcmethod_SubmitProfileEvents_, context, request, false);
}

::grpc::Status MuscleManager::Stub::RequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::muscle_manager_protocol::SettingsResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestSettings_, context, request, response);
}

void MuscleManager::Stub::experimental_async::RequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest* request, ::muscle_manager_protocol::SettingsResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestSettings_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::RequestSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::SettingsResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestSettings_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::RequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest* request, ::muscle_manager_protocol::SettingsResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestSettings_, context, request, response, reactor);
}

void MuscleManager::Stub::experimental_async::RequestSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::SettingsResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::SettingsResult>* MuscleManager::Stub::AsyncRequestSettingsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::SettingsResult>::Create(channel_.get(), cq, rpcmethod_RequestSettings_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::SettingsResult>* MuscleManager::Stub::PrepareAsyncRequestSettingsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::SettingsResult>::Create(channel_.get(), cq, rpcmethod_RequestSettings_, context, request, false);
}

::grpc::Status MuscleManager::Stub::RegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::muscle_manager_protocol::RegistrationResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterInstance_, context, request, response);
}

void MuscleManager::Stub::experimental_async::RegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest* request, ::muscle_manager_protocol::RegistrationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterInstance_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::RegisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::RegistrationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterInstance_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::RegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest* request, ::muscle_manager_protocol::RegistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterInstance_, context, request, response, reactor);
}

void MuscleManager::Stub::experimental_async::RegisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::RegistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::RegistrationResult>* MuscleManager::Stub::AsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::RegistrationResult>::Create(channel_.get(), cq, rpcmethod_RegisterInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::RegistrationResult>* MuscleManager::Stub::PrepareAsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::RegistrationResult>::Create(channel_.get(), cq, rpcmethod_RegisterInstance_, context, request, false);
}

::grpc::Status MuscleManager::Stub::RequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::muscle_manager_protocol::PeerResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestPeers_, context, request, response);
}

void MuscleManager::Stub::experimental_async::RequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest* request, ::muscle_manager_protocol::PeerResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestPeers_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::RequestPeers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::PeerResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestPeers_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::RequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest* request, ::muscle_manager_protocol::PeerResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestPeers_, context, request, response, reactor);
}

void MuscleManager::Stub::experimental_async::RequestPeers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::PeerResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestPeers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::PeerResult>* MuscleManager::Stub::AsyncRequestPeersRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::PeerResult>::Create(channel_.get(), cq, rpcmethod_RequestPeers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::PeerResult>* MuscleManager::Stub::PrepareAsyncRequestPeersRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::PeerResult>::Create(channel_.get(), cq, rpcmethod_RequestPeers_, context, request, false);
}

::grpc::Status MuscleManager::Stub::DeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::muscle_manager_protocol::DeregistrationResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeregisterInstance_, context, request, response);
}

void MuscleManager::Stub::experimental_async::DeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest* request, ::muscle_manager_protocol::DeregistrationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeregisterInstance_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::DeregisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::DeregistrationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeregisterInstance_, context, request, response, std::move(f));
}

void MuscleManager::Stub::experimental_async::DeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest* request, ::muscle_manager_protocol::DeregistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeregisterInstance_, context, request, response, reactor);
}

void MuscleManager::Stub::experimental_async::DeregisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::DeregistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeregisterInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::DeregistrationResult>* MuscleManager::Stub::AsyncDeregisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::DeregistrationResult>::Create(channel_.get(), cq, rpcmethod_DeregisterInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::DeregistrationResult>* MuscleManager::Stub::PrepareAsyncDeregisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::muscle_manager_protocol::DeregistrationResult>::Create(channel_.get(), cq, rpcmethod_DeregisterInstance_, context, request, false);
}

MuscleManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MuscleManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MuscleManager::Service, ::muscle_manager_protocol::LogMessage, ::muscle_manager_protocol::LogResult>(
          std::mem_fn(&MuscleManager::Service::SubmitLogMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MuscleManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MuscleManager::Service, ::muscle_manager_protocol::Profile, ::muscle_manager_protocol::ProfileResult>(
          std::mem_fn(&MuscleManager::Service::SubmitProfileEvents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MuscleManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MuscleManager::Service, ::muscle_manager_protocol::SettingsRequest, ::muscle_manager_protocol::SettingsResult>(
          std::mem_fn(&MuscleManager::Service::RequestSettings), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MuscleManager_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MuscleManager::Service, ::muscle_manager_protocol::RegistrationRequest, ::muscle_manager_protocol::RegistrationResult>(
          std::mem_fn(&MuscleManager::Service::RegisterInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MuscleManager_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MuscleManager::Service, ::muscle_manager_protocol::PeerRequest, ::muscle_manager_protocol::PeerResult>(
          std::mem_fn(&MuscleManager::Service::RequestPeers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MuscleManager_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MuscleManager::Service, ::muscle_manager_protocol::DeregistrationRequest, ::muscle_manager_protocol::DeregistrationResult>(
          std::mem_fn(&MuscleManager::Service::DeregisterInstance), this)));
}

MuscleManager::Service::~Service() {
}

::grpc::Status MuscleManager::Service::SubmitLogMessage(::grpc::ServerContext* context, const ::muscle_manager_protocol::LogMessage* request, ::muscle_manager_protocol::LogResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MuscleManager::Service::SubmitProfileEvents(::grpc::ServerContext* context, const ::muscle_manager_protocol::Profile* request, ::muscle_manager_protocol::ProfileResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MuscleManager::Service::RequestSettings(::grpc::ServerContext* context, const ::muscle_manager_protocol::SettingsRequest* request, ::muscle_manager_protocol::SettingsResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MuscleManager::Service::RegisterInstance(::grpc::ServerContext* context, const ::muscle_manager_protocol::RegistrationRequest* request, ::muscle_manager_protocol::RegistrationResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MuscleManager::Service::RequestPeers(::grpc::ServerContext* context, const ::muscle_manager_protocol::PeerRequest* request, ::muscle_manager_protocol::PeerResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MuscleManager::Service::DeregisterInstance(::grpc::ServerContext* context, const ::muscle_manager_protocol::DeregistrationRequest* request, ::muscle_manager_protocol::DeregistrationResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace muscle_manager_protocol

