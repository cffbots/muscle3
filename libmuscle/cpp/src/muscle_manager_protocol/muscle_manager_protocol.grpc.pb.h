// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: muscle_manager_protocol/muscle_manager_protocol.proto
#ifndef GRPC_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto__INCLUDED
#define GRPC_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto__INCLUDED

#include "muscle_manager_protocol/muscle_manager_protocol.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace muscle_manager_protocol {

// The MUSCLE Manager Protocol
class MuscleManager final {
 public:
  static constexpr char const* service_full_name() {
    return "muscle_manager_protocol.MuscleManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a logged message to the Manager
    virtual ::grpc::Status SubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::muscle_manager_protocol::LogResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::LogResult>> AsyncSubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::LogResult>>(AsyncSubmitLogMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::LogResult>> PrepareAsyncSubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::LogResult>>(PrepareAsyncSubmitLogMessageRaw(context, request, cq));
    }
    // Sends a batch of profiling events to the Manager
    virtual ::grpc::Status SubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::muscle_manager_protocol::ProfileResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::ProfileResult>> AsyncSubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::ProfileResult>>(AsyncSubmitProfileEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::ProfileResult>> PrepareAsyncSubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::ProfileResult>>(PrepareAsyncSubmitProfileEventsRaw(context, request, cq));
    }
    // Requests the global base settings
    virtual ::grpc::Status RequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::muscle_manager_protocol::SettingsResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::SettingsResult>> AsyncRequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::SettingsResult>>(AsyncRequestSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::SettingsResult>> PrepareAsyncRequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::SettingsResult>>(PrepareAsyncRequestSettingsRaw(context, request, cq));
    }
    // Registers a newly started kernel instance
    virtual ::grpc::Status RegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::muscle_manager_protocol::RegistrationResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::RegistrationResult>> AsyncRegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::RegistrationResult>>(AsyncRegisterInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::RegistrationResult>> PrepareAsyncRegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::RegistrationResult>>(PrepareAsyncRegisterInstanceRaw(context, request, cq));
    }
    // Requests information about peers
    virtual ::grpc::Status RequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::muscle_manager_protocol::PeerResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::PeerResult>> AsyncRequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::PeerResult>>(AsyncRequestPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::PeerResult>> PrepareAsyncRequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::PeerResult>>(PrepareAsyncRequestPeersRaw(context, request, cq));
    }
    // Deregisters an instance on shutdown
    virtual ::grpc::Status DeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::muscle_manager_protocol::DeregistrationResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::DeregistrationResult>> AsyncDeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::DeregistrationResult>>(AsyncDeregisterInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::DeregistrationResult>> PrepareAsyncDeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::DeregistrationResult>>(PrepareAsyncDeregisterInstanceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a logged message to the Manager
      virtual void SubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage* request, ::muscle_manager_protocol::LogResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitLogMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::LogResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage* request, ::muscle_manager_protocol::LogResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SubmitLogMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::LogResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Sends a batch of profiling events to the Manager
      virtual void SubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile* request, ::muscle_manager_protocol::ProfileResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitProfileEvents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::ProfileResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile* request, ::muscle_manager_protocol::ProfileResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SubmitProfileEvents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::ProfileResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Requests the global base settings
      virtual void RequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest* request, ::muscle_manager_protocol::SettingsResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::SettingsResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest* request, ::muscle_manager_protocol::SettingsResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RequestSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::SettingsResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Registers a newly started kernel instance
      virtual void RegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest* request, ::muscle_manager_protocol::RegistrationResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::RegistrationResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest* request, ::muscle_manager_protocol::RegistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::RegistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Requests information about peers
      virtual void RequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest* request, ::muscle_manager_protocol::PeerResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestPeers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::PeerResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest* request, ::muscle_manager_protocol::PeerResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RequestPeers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::PeerResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Deregisters an instance on shutdown
      virtual void DeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest* request, ::muscle_manager_protocol::DeregistrationResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeregisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::DeregistrationResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest* request, ::muscle_manager_protocol::DeregistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeregisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::DeregistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::LogResult>* AsyncSubmitLogMessageRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::LogResult>* PrepareAsyncSubmitLogMessageRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::ProfileResult>* AsyncSubmitProfileEventsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::ProfileResult>* PrepareAsyncSubmitProfileEventsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::SettingsResult>* AsyncRequestSettingsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::SettingsResult>* PrepareAsyncRequestSettingsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::RegistrationResult>* AsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::RegistrationResult>* PrepareAsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::PeerResult>* AsyncRequestPeersRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::PeerResult>* PrepareAsyncRequestPeersRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::DeregistrationResult>* AsyncDeregisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::muscle_manager_protocol::DeregistrationResult>* PrepareAsyncDeregisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::muscle_manager_protocol::LogResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::LogResult>> AsyncSubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::LogResult>>(AsyncSubmitLogMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::LogResult>> PrepareAsyncSubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::LogResult>>(PrepareAsyncSubmitLogMessageRaw(context, request, cq));
    }
    ::grpc::Status SubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::muscle_manager_protocol::ProfileResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::ProfileResult>> AsyncSubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::ProfileResult>>(AsyncSubmitProfileEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::ProfileResult>> PrepareAsyncSubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::ProfileResult>>(PrepareAsyncSubmitProfileEventsRaw(context, request, cq));
    }
    ::grpc::Status RequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::muscle_manager_protocol::SettingsResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::SettingsResult>> AsyncRequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::SettingsResult>>(AsyncRequestSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::SettingsResult>> PrepareAsyncRequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::SettingsResult>>(PrepareAsyncRequestSettingsRaw(context, request, cq));
    }
    ::grpc::Status RegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::muscle_manager_protocol::RegistrationResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::RegistrationResult>> AsyncRegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::RegistrationResult>>(AsyncRegisterInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::RegistrationResult>> PrepareAsyncRegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::RegistrationResult>>(PrepareAsyncRegisterInstanceRaw(context, request, cq));
    }
    ::grpc::Status RequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::muscle_manager_protocol::PeerResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::PeerResult>> AsyncRequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::PeerResult>>(AsyncRequestPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::PeerResult>> PrepareAsyncRequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::PeerResult>>(PrepareAsyncRequestPeersRaw(context, request, cq));
    }
    ::grpc::Status DeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::muscle_manager_protocol::DeregistrationResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::DeregistrationResult>> AsyncDeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::DeregistrationResult>>(AsyncDeregisterInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::DeregistrationResult>> PrepareAsyncDeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::DeregistrationResult>>(PrepareAsyncDeregisterInstanceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage* request, ::muscle_manager_protocol::LogResult* response, std::function<void(::grpc::Status)>) override;
      void SubmitLogMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::LogResult* response, std::function<void(::grpc::Status)>) override;
      void SubmitLogMessage(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage* request, ::muscle_manager_protocol::LogResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SubmitLogMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::LogResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile* request, ::muscle_manager_protocol::ProfileResult* response, std::function<void(::grpc::Status)>) override;
      void SubmitProfileEvents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::ProfileResult* response, std::function<void(::grpc::Status)>) override;
      void SubmitProfileEvents(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile* request, ::muscle_manager_protocol::ProfileResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SubmitProfileEvents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::ProfileResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest* request, ::muscle_manager_protocol::SettingsResult* response, std::function<void(::grpc::Status)>) override;
      void RequestSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::SettingsResult* response, std::function<void(::grpc::Status)>) override;
      void RequestSettings(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest* request, ::muscle_manager_protocol::SettingsResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RequestSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::SettingsResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest* request, ::muscle_manager_protocol::RegistrationResult* response, std::function<void(::grpc::Status)>) override;
      void RegisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::RegistrationResult* response, std::function<void(::grpc::Status)>) override;
      void RegisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest* request, ::muscle_manager_protocol::RegistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RegisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::RegistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest* request, ::muscle_manager_protocol::PeerResult* response, std::function<void(::grpc::Status)>) override;
      void RequestPeers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::PeerResult* response, std::function<void(::grpc::Status)>) override;
      void RequestPeers(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest* request, ::muscle_manager_protocol::PeerResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RequestPeers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::PeerResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest* request, ::muscle_manager_protocol::DeregistrationResult* response, std::function<void(::grpc::Status)>) override;
      void DeregisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::DeregistrationResult* response, std::function<void(::grpc::Status)>) override;
      void DeregisterInstance(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest* request, ::muscle_manager_protocol::DeregistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeregisterInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::muscle_manager_protocol::DeregistrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::LogResult>* AsyncSubmitLogMessageRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::LogResult>* PrepareAsyncSubmitLogMessageRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::LogMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::ProfileResult>* AsyncSubmitProfileEventsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::ProfileResult>* PrepareAsyncSubmitProfileEventsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::Profile& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::SettingsResult>* AsyncRequestSettingsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::SettingsResult>* PrepareAsyncRequestSettingsRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::SettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::RegistrationResult>* AsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::RegistrationResult>* PrepareAsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::PeerResult>* AsyncRequestPeersRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::PeerResult>* PrepareAsyncRequestPeersRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::DeregistrationResult>* AsyncDeregisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::muscle_manager_protocol::DeregistrationResult>* PrepareAsyncDeregisterInstanceRaw(::grpc::ClientContext* context, const ::muscle_manager_protocol::DeregistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitLogMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitProfileEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestPeers_;
    const ::grpc::internal::RpcMethod rpcmethod_DeregisterInstance_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a logged message to the Manager
    virtual ::grpc::Status SubmitLogMessage(::grpc::ServerContext* context, const ::muscle_manager_protocol::LogMessage* request, ::muscle_manager_protocol::LogResult* response);
    // Sends a batch of profiling events to the Manager
    virtual ::grpc::Status SubmitProfileEvents(::grpc::ServerContext* context, const ::muscle_manager_protocol::Profile* request, ::muscle_manager_protocol::ProfileResult* response);
    // Requests the global base settings
    virtual ::grpc::Status RequestSettings(::grpc::ServerContext* context, const ::muscle_manager_protocol::SettingsRequest* request, ::muscle_manager_protocol::SettingsResult* response);
    // Registers a newly started kernel instance
    virtual ::grpc::Status RegisterInstance(::grpc::ServerContext* context, const ::muscle_manager_protocol::RegistrationRequest* request, ::muscle_manager_protocol::RegistrationResult* response);
    // Requests information about peers
    virtual ::grpc::Status RequestPeers(::grpc::ServerContext* context, const ::muscle_manager_protocol::PeerRequest* request, ::muscle_manager_protocol::PeerResult* response);
    // Deregisters an instance on shutdown
    virtual ::grpc::Status DeregisterInstance(::grpc::ServerContext* context, const ::muscle_manager_protocol::DeregistrationRequest* request, ::muscle_manager_protocol::DeregistrationResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitLogMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitLogMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitLogMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLogMessage(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::LogMessage* /*request*/, ::muscle_manager_protocol::LogResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitLogMessage(::grpc::ServerContext* context, ::muscle_manager_protocol::LogMessage* request, ::grpc::ServerAsyncResponseWriter< ::muscle_manager_protocol::LogResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitProfileEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitProfileEvents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubmitProfileEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProfileEvents(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::Profile* /*request*/, ::muscle_manager_protocol::ProfileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitProfileEvents(::grpc::ServerContext* context, ::muscle_manager_protocol::Profile* request, ::grpc::ServerAsyncResponseWriter< ::muscle_manager_protocol::ProfileResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestSettings() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSettings(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::SettingsRequest* /*request*/, ::muscle_manager_protocol::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSettings(::grpc::ServerContext* context, ::muscle_manager_protocol::SettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::muscle_manager_protocol::SettingsResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::RegistrationRequest* /*request*/, ::muscle_manager_protocol::RegistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInstance(::grpc::ServerContext* context, ::muscle_manager_protocol::RegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::muscle_manager_protocol::RegistrationResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestPeers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RequestPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPeers(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::PeerRequest* /*request*/, ::muscle_manager_protocol::PeerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestPeers(::grpc::ServerContext* context, ::muscle_manager_protocol::PeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::muscle_manager_protocol::PeerResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeregisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeregisterInstance() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeregisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::DeregistrationRequest* /*request*/, ::muscle_manager_protocol::DeregistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregisterInstance(::grpc::ServerContext* context, ::muscle_manager_protocol::DeregistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::muscle_manager_protocol::DeregistrationResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitLogMessage<WithAsyncMethod_SubmitProfileEvents<WithAsyncMethod_RequestSettings<WithAsyncMethod_RegisterInstance<WithAsyncMethod_RequestPeers<WithAsyncMethod_DeregisterInstance<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitLogMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitLogMessage() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::LogMessage, ::muscle_manager_protocol::LogResult>(
          [this](::grpc::ServerContext* context,
                 const ::muscle_manager_protocol::LogMessage* request,
                 ::muscle_manager_protocol::LogResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SubmitLogMessage(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SubmitLogMessage(
        ::grpc::experimental::MessageAllocator< ::muscle_manager_protocol::LogMessage, ::muscle_manager_protocol::LogResult>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::LogMessage, ::muscle_manager_protocol::LogResult>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitLogMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLogMessage(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::LogMessage* /*request*/, ::muscle_manager_protocol::LogResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitLogMessage(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::LogMessage* /*request*/, ::muscle_manager_protocol::LogResult* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitProfileEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitProfileEvents() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::Profile, ::muscle_manager_protocol::ProfileResult>(
          [this](::grpc::ServerContext* context,
                 const ::muscle_manager_protocol::Profile* request,
                 ::muscle_manager_protocol::ProfileResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SubmitProfileEvents(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SubmitProfileEvents(
        ::grpc::experimental::MessageAllocator< ::muscle_manager_protocol::Profile, ::muscle_manager_protocol::ProfileResult>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::Profile, ::muscle_manager_protocol::ProfileResult>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitProfileEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProfileEvents(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::Profile* /*request*/, ::muscle_manager_protocol::ProfileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitProfileEvents(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::Profile* /*request*/, ::muscle_manager_protocol::ProfileResult* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestSettings() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::SettingsRequest, ::muscle_manager_protocol::SettingsResult>(
          [this](::grpc::ServerContext* context,
                 const ::muscle_manager_protocol::SettingsRequest* request,
                 ::muscle_manager_protocol::SettingsResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RequestSettings(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RequestSettings(
        ::grpc::experimental::MessageAllocator< ::muscle_manager_protocol::SettingsRequest, ::muscle_manager_protocol::SettingsResult>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::SettingsRequest, ::muscle_manager_protocol::SettingsResult>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSettings(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::SettingsRequest* /*request*/, ::muscle_manager_protocol::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestSettings(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::SettingsRequest* /*request*/, ::muscle_manager_protocol::SettingsResult* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterInstance() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::RegistrationRequest, ::muscle_manager_protocol::RegistrationResult>(
          [this](::grpc::ServerContext* context,
                 const ::muscle_manager_protocol::RegistrationRequest* request,
                 ::muscle_manager_protocol::RegistrationResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RegisterInstance(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RegisterInstance(
        ::grpc::experimental::MessageAllocator< ::muscle_manager_protocol::RegistrationRequest, ::muscle_manager_protocol::RegistrationResult>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::RegistrationRequest, ::muscle_manager_protocol::RegistrationResult>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::RegistrationRequest* /*request*/, ::muscle_manager_protocol::RegistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RegisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::RegistrationRequest* /*request*/, ::muscle_manager_protocol::RegistrationResult* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestPeers() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::PeerRequest, ::muscle_manager_protocol::PeerResult>(
          [this](::grpc::ServerContext* context,
                 const ::muscle_manager_protocol::PeerRequest* request,
                 ::muscle_manager_protocol::PeerResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RequestPeers(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RequestPeers(
        ::grpc::experimental::MessageAllocator< ::muscle_manager_protocol::PeerRequest, ::muscle_manager_protocol::PeerResult>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::PeerRequest, ::muscle_manager_protocol::PeerResult>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPeers(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::PeerRequest* /*request*/, ::muscle_manager_protocol::PeerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestPeers(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::PeerRequest* /*request*/, ::muscle_manager_protocol::PeerResult* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeregisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeregisterInstance() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::DeregistrationRequest, ::muscle_manager_protocol::DeregistrationResult>(
          [this](::grpc::ServerContext* context,
                 const ::muscle_manager_protocol::DeregistrationRequest* request,
                 ::muscle_manager_protocol::DeregistrationResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeregisterInstance(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeregisterInstance(
        ::grpc::experimental::MessageAllocator< ::muscle_manager_protocol::DeregistrationRequest, ::muscle_manager_protocol::DeregistrationResult>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::muscle_manager_protocol::DeregistrationRequest, ::muscle_manager_protocol::DeregistrationResult>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeregisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::DeregistrationRequest* /*request*/, ::muscle_manager_protocol::DeregistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeregisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::DeregistrationRequest* /*request*/, ::muscle_manager_protocol::DeregistrationResult* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SubmitLogMessage<ExperimentalWithCallbackMethod_SubmitProfileEvents<ExperimentalWithCallbackMethod_RequestSettings<ExperimentalWithCallbackMethod_RegisterInstance<ExperimentalWithCallbackMethod_RequestPeers<ExperimentalWithCallbackMethod_DeregisterInstance<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitLogMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitLogMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitLogMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLogMessage(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::LogMessage* /*request*/, ::muscle_manager_protocol::LogResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitProfileEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitProfileEvents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubmitProfileEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProfileEvents(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::Profile* /*request*/, ::muscle_manager_protocol::ProfileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestSettings() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSettings(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::SettingsRequest* /*request*/, ::muscle_manager_protocol::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::RegistrationRequest* /*request*/, ::muscle_manager_protocol::RegistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestPeers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RequestPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPeers(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::PeerRequest* /*request*/, ::muscle_manager_protocol::PeerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeregisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeregisterInstance() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeregisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::DeregistrationRequest* /*request*/, ::muscle_manager_protocol::DeregistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitLogMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitLogMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitLogMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLogMessage(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::LogMessage* /*request*/, ::muscle_manager_protocol::LogResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitLogMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitProfileEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitProfileEvents() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubmitProfileEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProfileEvents(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::Profile* /*request*/, ::muscle_manager_protocol::ProfileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitProfileEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestSettings() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSettings(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::SettingsRequest* /*request*/, ::muscle_manager_protocol::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::RegistrationRequest* /*request*/, ::muscle_manager_protocol::RegistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestPeers() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RequestPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPeers(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::PeerRequest* /*request*/, ::muscle_manager_protocol::PeerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestPeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeregisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeregisterInstance() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeregisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::DeregistrationRequest* /*request*/, ::muscle_manager_protocol::DeregistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregisterInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitLogMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitLogMessage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SubmitLogMessage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitLogMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitLogMessage(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::LogMessage* /*request*/, ::muscle_manager_protocol::LogResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitLogMessage(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitProfileEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitProfileEvents() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SubmitProfileEvents(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitProfileEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProfileEvents(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::Profile* /*request*/, ::muscle_manager_protocol::ProfileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitProfileEvents(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestSettings() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RequestSettings(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSettings(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::SettingsRequest* /*request*/, ::muscle_manager_protocol::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestSettings(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterInstance() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RegisterInstance(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::RegistrationRequest* /*request*/, ::muscle_manager_protocol::RegistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RegisterInstance(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestPeers() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RequestPeers(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPeers(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::PeerRequest* /*request*/, ::muscle_manager_protocol::PeerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestPeers(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeregisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeregisterInstance() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeregisterInstance(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeregisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::DeregistrationRequest* /*request*/, ::muscle_manager_protocol::DeregistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeregisterInstance(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitLogMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitLogMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::muscle_manager_protocol::LogMessage, ::muscle_manager_protocol::LogResult>(std::bind(&WithStreamedUnaryMethod_SubmitLogMessage<BaseClass>::StreamedSubmitLogMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SubmitLogMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitLogMessage(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::LogMessage* /*request*/, ::muscle_manager_protocol::LogResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitLogMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::muscle_manager_protocol::LogMessage,::muscle_manager_protocol::LogResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitProfileEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitProfileEvents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::muscle_manager_protocol::Profile, ::muscle_manager_protocol::ProfileResult>(std::bind(&WithStreamedUnaryMethod_SubmitProfileEvents<BaseClass>::StreamedSubmitProfileEvents, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SubmitProfileEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitProfileEvents(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::Profile* /*request*/, ::muscle_manager_protocol::ProfileResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitProfileEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::muscle_manager_protocol::Profile,::muscle_manager_protocol::ProfileResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestSettings() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::muscle_manager_protocol::SettingsRequest, ::muscle_manager_protocol::SettingsResult>(std::bind(&WithStreamedUnaryMethod_RequestSettings<BaseClass>::StreamedRequestSettings, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestSettings(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::SettingsRequest* /*request*/, ::muscle_manager_protocol::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::muscle_manager_protocol::SettingsRequest,::muscle_manager_protocol::SettingsResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::muscle_manager_protocol::RegistrationRequest, ::muscle_manager_protocol::RegistrationResult>(std::bind(&WithStreamedUnaryMethod_RegisterInstance<BaseClass>::StreamedRegisterInstance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::RegistrationRequest* /*request*/, ::muscle_manager_protocol::RegistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::muscle_manager_protocol::RegistrationRequest,::muscle_manager_protocol::RegistrationResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestPeers() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::muscle_manager_protocol::PeerRequest, ::muscle_manager_protocol::PeerResult>(std::bind(&WithStreamedUnaryMethod_RequestPeers<BaseClass>::StreamedRequestPeers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestPeers(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::PeerRequest* /*request*/, ::muscle_manager_protocol::PeerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestPeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::muscle_manager_protocol::PeerRequest,::muscle_manager_protocol::PeerResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeregisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeregisterInstance() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::muscle_manager_protocol::DeregistrationRequest, ::muscle_manager_protocol::DeregistrationResult>(std::bind(&WithStreamedUnaryMethod_DeregisterInstance<BaseClass>::StreamedDeregisterInstance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeregisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeregisterInstance(::grpc::ServerContext* /*context*/, const ::muscle_manager_protocol::DeregistrationRequest* /*request*/, ::muscle_manager_protocol::DeregistrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeregisterInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::muscle_manager_protocol::DeregistrationRequest,::muscle_manager_protocol::DeregistrationResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitLogMessage<WithStreamedUnaryMethod_SubmitProfileEvents<WithStreamedUnaryMethod_RequestSettings<WithStreamedUnaryMethod_RegisterInstance<WithStreamedUnaryMethod_RequestPeers<WithStreamedUnaryMethod_DeregisterInstance<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitLogMessage<WithStreamedUnaryMethod_SubmitProfileEvents<WithStreamedUnaryMethod_RequestSettings<WithStreamedUnaryMethod_RegisterInstance<WithStreamedUnaryMethod_RequestPeers<WithStreamedUnaryMethod_DeregisterInstance<Service > > > > > > StreamedService;
};

}  // namespace muscle_manager_protocol


#endif  // GRPC_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto__INCLUDED
