// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: muscle_manager_protocol/muscle_manager_protocol.proto

#include "muscle_manager_protocol/muscle_manager_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto;
namespace muscle_manager_protocol {
class LogMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogMessage> _instance;
} _LogMessage_default_instance_;
class LogResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogResult> _instance;
} _LogResult_default_instance_;
class PortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Port> _instance;
} _Port_default_instance_;
class ProfileEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileEvent> _instance;
} _ProfileEvent_default_instance_;
class ProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Profile> _instance;
} _Profile_default_instance_;
class ProfileResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileResult> _instance;
} _ProfileResult_default_instance_;
class RegistrationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistrationRequest> _instance;
} _RegistrationRequest_default_instance_;
class RegistrationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistrationResult> _instance;
} _RegistrationResult_default_instance_;
class ConduitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conduit> _instance;
} _Conduit_default_instance_;
class PeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerRequest> _instance;
} _PeerRequest_default_instance_;
class PeerResult_PeerDimensionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerResult_PeerDimensions> _instance;
} _PeerResult_PeerDimensions_default_instance_;
class PeerResult_PeerLocationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerResult_PeerLocations> _instance;
} _PeerResult_PeerLocations_default_instance_;
class PeerResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerResult> _instance;
} _PeerResult_default_instance_;
class ListOfDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOfDouble> _instance;
} _ListOfDouble_default_instance_;
class ListOfListOfDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOfListOfDouble> _instance;
} _ListOfListOfDouble_default_instance_;
class SettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Setting> _instance;
} _Setting_default_instance_;
class SettingsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettingsRequest> _instance;
} _SettingsRequest_default_instance_;
class SettingsResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettingsResult> _instance;
} _SettingsResult_default_instance_;
class DeregistrationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeregistrationRequest> _instance;
} _DeregistrationRequest_default_instance_;
class DeregistrationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeregistrationResult> _instance;
} _DeregistrationResult_default_instance_;
}  // namespace muscle_manager_protocol
static void InitDefaultsscc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_Conduit_default_instance_;
    new (ptr) ::muscle_manager_protocol::Conduit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::Conduit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_DeregistrationRequest_default_instance_;
    new (ptr) ::muscle_manager_protocol::DeregistrationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::DeregistrationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_DeregistrationResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::DeregistrationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::DeregistrationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_ListOfDouble_default_instance_;
    new (ptr) ::muscle_manager_protocol::ListOfDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::ListOfDouble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_ListOfListOfDouble_default_instance_;
    new (ptr) ::muscle_manager_protocol::ListOfListOfDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::ListOfListOfDouble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_LogMessage_default_instance_;
    new (ptr) ::muscle_manager_protocol::LogMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::LogMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_LogResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::LogResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::LogResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_PeerRequest_default_instance_;
    new (ptr) ::muscle_manager_protocol::PeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::PeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_PeerResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::PeerResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::PeerResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
      &scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
      &scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_PeerResult_PeerDimensions_default_instance_;
    new (ptr) ::muscle_manager_protocol::PeerResult_PeerDimensions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::PeerResult_PeerDimensions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_PeerResult_PeerLocations_default_instance_;
    new (ptr) ::muscle_manager_protocol::PeerResult_PeerLocations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::PeerResult_PeerLocations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_Port_default_instance_;
    new (ptr) ::muscle_manager_protocol::Port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::Port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_Profile_default_instance_;
    new (ptr) ::muscle_manager_protocol::Profile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::Profile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_ProfileEvent_default_instance_;
    new (ptr) ::muscle_manager_protocol::ProfileEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::ProfileEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_ProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_ProfileResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::ProfileResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::ProfileResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_RegistrationRequest_default_instance_;
    new (ptr) ::muscle_manager_protocol::RegistrationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::RegistrationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_RegistrationResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::RegistrationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::RegistrationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_Setting_default_instance_;
    new (ptr) ::muscle_manager_protocol::Setting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::Setting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
      &scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_SettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_SettingsRequest_default_instance_;
    new (ptr) ::muscle_manager_protocol::SettingsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::SettingsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muscle_manager_protocol::_SettingsResult_default_instance_;
    new (ptr) ::muscle_manager_protocol::SettingsResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muscle_manager_protocol::SettingsResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto}, {
      &scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, instance_id_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, level_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogMessage, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::LogResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Port, name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Port, operator__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, instance_id_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, start_time_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, stop_time_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, port_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, port_length_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, slot_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileEvent, message_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Profile, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ProfileResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationRequest, instance_name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationRequest, network_locations_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationRequest, ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationResult, status_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::RegistrationResult, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Conduit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Conduit, sender_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Conduit, receiver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerRequest, instance_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerDimensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerDimensions, peer_name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerDimensions, dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerLocations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerLocations, instance_name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult_PeerLocations, locations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, status_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, error_message_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, conduits_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, peer_dimensions_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::PeerResult, peer_locations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ListOfDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ListOfDouble, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ListOfListOfDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::ListOfListOfDouble, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, name_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_type_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_string_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_int_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_float_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_bool_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_list_float_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::Setting, value_list_list_float_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::SettingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::SettingsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::SettingsResult, setting_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationRequest, instance_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationResult, status_),
  PROTOBUF_FIELD_OFFSET(::muscle_manager_protocol::DeregistrationResult, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::muscle_manager_protocol::LogMessage)},
  { 9, -1, sizeof(::muscle_manager_protocol::LogResult)},
  { 14, -1, sizeof(::muscle_manager_protocol::Port)},
  { 21, -1, sizeof(::muscle_manager_protocol::ProfileEvent)},
  { 34, -1, sizeof(::muscle_manager_protocol::Profile)},
  { 40, -1, sizeof(::muscle_manager_protocol::ProfileResult)},
  { 45, -1, sizeof(::muscle_manager_protocol::RegistrationRequest)},
  { 53, -1, sizeof(::muscle_manager_protocol::RegistrationResult)},
  { 60, -1, sizeof(::muscle_manager_protocol::Conduit)},
  { 67, -1, sizeof(::muscle_manager_protocol::PeerRequest)},
  { 73, -1, sizeof(::muscle_manager_protocol::PeerResult_PeerDimensions)},
  { 80, -1, sizeof(::muscle_manager_protocol::PeerResult_PeerLocations)},
  { 87, -1, sizeof(::muscle_manager_protocol::PeerResult)},
  { 97, -1, sizeof(::muscle_manager_protocol::ListOfDouble)},
  { 103, -1, sizeof(::muscle_manager_protocol::ListOfListOfDouble)},
  { 109, -1, sizeof(::muscle_manager_protocol::Setting)},
  { 122, -1, sizeof(::muscle_manager_protocol::SettingsRequest)},
  { 127, -1, sizeof(::muscle_manager_protocol::SettingsResult)},
  { 133, -1, sizeof(::muscle_manager_protocol::DeregistrationRequest)},
  { 139, -1, sizeof(::muscle_manager_protocol::DeregistrationResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_LogMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_LogResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_Port_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_ProfileEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_Profile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_ProfileResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_RegistrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_RegistrationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_Conduit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_PeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_PeerResult_PeerDimensions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_PeerResult_PeerLocations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_PeerResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_ListOfDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_ListOfListOfDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_Setting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_SettingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_SettingsResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_DeregistrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muscle_manager_protocol::_DeregistrationResult_default_instance_),
};

const char descriptor_table_protodef_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5muscle_manager_protocol/muscle_manager"
  "_protocol.proto\022\027muscle_manager_protocol"
  "\032\037google/protobuf/timestamp.proto\"\220\001\n\nLo"
  "gMessage\022\023\n\013instance_id\030\001 \001(\t\022-\n\ttimesta"
  "mp\030\003 \001(\0132\032.google.protobuf.Timestamp\0220\n\005"
  "level\030\004 \001(\0162!.muscle_manager_protocol.Lo"
  "gLevel\022\014\n\004text\030\005 \001(\t\"\013\n\tLogResult\"I\n\004Por"
  "t\022\014\n\004name\030\001 \001(\t\0223\n\010operator\030\002 \001(\0162!.musc"
  "le_manager_protocol.Operator\"\247\002\n\014Profile"
  "Event\022\023\n\013instance_id\030\001 \001(\t\022.\n\nstart_time"
  "\030\002 \001(\0132\032.google.protobuf.Timestamp\022-\n\tst"
  "op_time\030\003 \001(\0132\032.google.protobuf.Timestam"
  "p\022=\n\nevent_type\030\004 \001(\0162).muscle_manager_p"
  "rotocol.ProfileEventType\022+\n\004port\030\005 \001(\0132\035"
  ".muscle_manager_protocol.Port\022\023\n\013port_le"
  "ngth\030\006 \001(\005\022\014\n\004slot\030\007 \001(\005\022\024\n\014message_size"
  "\030\010 \001(\003\"@\n\007Profile\0225\n\006events\030\001 \003(\0132%.musc"
  "le_manager_protocol.ProfileEvent\"\017\n\rProf"
  "ileResult\"u\n\023RegistrationRequest\022\025\n\rinst"
  "ance_name\030\001 \001(\t\022\031\n\021network_locations\030\002 \003"
  "(\t\022,\n\005ports\030\003 \003(\0132\035.muscle_manager_proto"
  "col.Port\"b\n\022RegistrationResult\0225\n\006status"
  "\030\001 \001(\0162%.muscle_manager_protocol.ResultS"
  "tatus\022\025\n\rerror_message\030\002 \001(\t\"+\n\007Conduit\022"
  "\016\n\006sender\030\001 \001(\t\022\020\n\010receiver\030\002 \001(\t\"$\n\013Pee"
  "rRequest\022\025\n\rinstance_name\030\001 \001(\t\"\232\003\n\nPeer"
  "Result\0225\n\006status\030\001 \001(\0162%.muscle_manager_"
  "protocol.ResultStatus\022\025\n\rerror_message\030\002"
  " \001(\t\0222\n\010conduits\030\003 \003(\0132 .muscle_manager_"
  "protocol.Conduit\022K\n\017peer_dimensions\030\004 \003("
  "\01322.muscle_manager_protocol.PeerResult.P"
  "eerDimensions\022I\n\016peer_locations\030\005 \003(\01321."
  "muscle_manager_protocol.PeerResult.PeerL"
  "ocations\0327\n\016PeerDimensions\022\021\n\tpeer_name\030"
  "\001 \001(\t\022\022\n\ndimensions\030\002 \003(\005\0329\n\rPeerLocatio"
  "ns\022\025\n\rinstance_name\030\001 \001(\t\022\021\n\tlocations\030\002"
  " \003(\t\"\036\n\014ListOfDouble\022\016\n\006values\030\001 \003(\001\"K\n\022"
  "ListOfListOfDouble\0225\n\006values\030\001 \003(\0132%.mus"
  "cle_manager_protocol.ListOfDouble\"\265\002\n\007Se"
  "tting\022\014\n\004name\030\001 \001(\t\022=\n\nvalue_type\030\002 \001(\0162"
  ").muscle_manager_protocol.SettingValueTy"
  "pe\022\024\n\014value_string\030\003 \001(\t\022\021\n\tvalue_int\030\004 "
  "\001(\003\022\023\n\013value_float\030\005 \001(\001\022\022\n\nvalue_bool\030\006"
  " \001(\010\022\?\n\020value_list_float\030\007 \001(\0132%.muscle_"
  "manager_protocol.ListOfDouble\022J\n\025value_l"
  "ist_list_float\030\010 \001(\0132+.muscle_manager_pr"
  "otocol.ListOfListOfDouble\"\021\n\017SettingsReq"
  "uest\"J\n\016SettingsResult\0228\n\016setting_values"
  "\030\001 \003(\0132 .muscle_manager_protocol.Setting"
  "\".\n\025DeregistrationRequest\022\025\n\rinstance_na"
  "me\030\001 \001(\t\"d\n\024DeregistrationResult\0225\n\006stat"
  "us\030\001 \001(\0162%.muscle_manager_protocol.Resul"
  "tStatus\022\025\n\rerror_message\030\002 \001(\t*]\n\014Result"
  "Status\022\031\n\025RESULT_STATUS_SUCCESS\020\000\022\027\n\023RES"
  "ULT_STATUS_ERROR\020\001\022\031\n\025RESULT_STATUS_PEND"
  "ING\020\002*\210\001\n\010Operator\022\021\n\rOPERATOR_NONE\020\000\022\023\n"
  "\017OPERATOR_F_INIT\020\001\022\020\n\014OPERATOR_O_I\020\002\022\016\n\n"
  "OPERATOR_S\020\003\022\016\n\nOPERATOR_B\020\004\022\020\n\014OPERATOR"
  "_O_F\020\005\022\020\n\014OPERATOR_MAP\020\006*w\n\010LogLevel\022\023\n\017"
  "LOG_LEVEL_DEBUG\020\000\022\022\n\016LOG_LEVEL_INFO\020\001\022\025\n"
  "\021LOG_LEVEL_WARNING\020\003\022\023\n\017LOG_LEVEL_ERROR\020"
  "\004\022\026\n\022LOG_LEVEL_CRITICAL\020\005*\263\001\n\020ProfileEve"
  "ntType\022\037\n\033PROFILE_EVENT_TYPE_REGISTER\020\000\022"
  "\036\n\032PROFILE_EVENT_TYPE_CONNECT\020\004\022!\n\035PROFI"
  "LE_EVENT_TYPE_DEREGISTER\020\001\022\033\n\027PROFILE_EV"
  "ENT_TYPE_SEND\020\002\022\036\n\032PROFILE_EVENT_TYPE_RE"
  "CEIVE\020\003*\323\001\n\020SettingValueType\022\035\n\031SETTING_"
  "VALUE_TYPE_STRING\020\000\022\032\n\026SETTING_VALUE_TYP"
  "E_INT\020\001\022\034\n\030SETTING_VALUE_TYPE_FLOAT\020\002\022\033\n"
  "\027SETTING_VALUE_TYPE_BOOL\020\003\022!\n\035SETTING_VA"
  "LUE_TYPE_LIST_FLOAT\020\004\022&\n\"SETTING_VALUE_T"
  "YPE_LIST_LIST_FLOAT\020\0052\362\004\n\rMuscleManager\022"
  "[\n\020SubmitLogMessage\022#.muscle_manager_pro"
  "tocol.LogMessage\032\".muscle_manager_protoc"
  "ol.LogResult\022_\n\023SubmitProfileEvents\022 .mu"
  "scle_manager_protocol.Profile\032&.muscle_m"
  "anager_protocol.ProfileResult\022d\n\017Request"
  "Settings\022(.muscle_manager_protocol.Setti"
  "ngsRequest\032\'.muscle_manager_protocol.Set"
  "tingsResult\022m\n\020RegisterInstance\022,.muscle"
  "_manager_protocol.RegistrationRequest\032+."
  "muscle_manager_protocol.RegistrationResu"
  "lt\022Y\n\014RequestPeers\022$.muscle_manager_prot"
  "ocol.PeerRequest\032#.muscle_manager_protoc"
  "ol.PeerResult\022s\n\022DeregisterInstance\022..mu"
  "scle_manager_protocol.DeregistrationRequ"
  "est\032-.muscle_manager_protocol.Deregistra"
  "tionResultb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto_sccs[20] = {
  &scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_LogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_ProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_SettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
  &scc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto_once;
static bool descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto = {
  &descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto_initialized, descriptor_table_protodef_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto, "muscle_manager_protocol/muscle_manager_protocol.proto", 3498,
  &descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto_once, descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto_sccs, descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto_deps, 20, 1,
  schemas, file_default_instances, TableStruct_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto::offsets,
  file_level_metadata_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto, 20, file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto, file_level_service_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto), true);
namespace muscle_manager_protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[0];
}
bool ResultStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[1];
}
bool Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[2];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfileEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[3];
}
bool ProfileEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto);
  return file_level_enum_descriptors_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto[4];
}
bool SettingValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LogMessage::InitAsDefaultInstance() {
  ::muscle_manager_protocol::_LogMessage_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LogMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LogMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
LogMessage::_Internal::timestamp(const LogMessage* msg) {
  return *msg->timestamp_;
}
void LogMessage::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
LogMessage::LogMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance_id().empty()) {
    instance_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.LogMessage)
}

void LogMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(level_));
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.LogMessage)
  SharedDtor();
}

void LogMessage::SharedDtor() {
  instance_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void LogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMessage& LogMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogMessage_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  level_ = 0;
  _internal_metadata_.Clear();
}

const char* LogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_instance_id(), ptr, ctx, "muscle_manager_protocol.LogMessage.instance_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .muscle_manager_protocol.LogLevel level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::muscle_manager_protocol::LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // string text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_text(), ptr, ctx, "muscle_manager_protocol.LogMessage.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.LogMessage.instance_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::timestamp(this), target, stream);
  }

  // .muscle_manager_protocol.LogLevel level = 4;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_level(), target);
  }

  // string text = 5;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.LogMessage.text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.LogMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_id());
  }

  // string text = 5;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .muscle_manager_protocol.LogLevel level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.LogMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.LogMessage)
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_id().size() > 0) {

    instance_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void LogMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_id_.Swap(&other->instance_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogResult::InitAsDefaultInstance() {
}
class LogResult::_Internal {
 public:
};

LogResult::LogResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.LogResult)
}
LogResult::LogResult(const LogResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.LogResult)
}

void LogResult::SharedCtor() {
}

LogResult::~LogResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.LogResult)
  SharedDtor();
}

void LogResult::SharedDtor() {
}

void LogResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogResult& LogResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void LogResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.LogResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* LogResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.LogResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.LogResult)
  return target;
}

size_t LogResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.LogResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.LogResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LogResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.LogResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.LogResult)
    MergeFrom(*source);
  }
}

void LogResult::MergeFrom(const LogResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.LogResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.LogResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogResult::CopyFrom(const LogResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.LogResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogResult::IsInitialized() const {
  return true;
}

void LogResult::InternalSwap(LogResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Port::InitAsDefaultInstance() {
}
class Port::_Internal {
 public:
};

Port::Port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.Port)
}
Port::Port(const Port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.Port)
}

void Port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__ = 0;
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.Port)
  SharedDtor();
}

void Port::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Port& Port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Port_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void Port::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.Port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__ = 0;
  _internal_metadata_.Clear();
}

const char* Port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "muscle_manager_protocol.Port.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .muscle_manager_protocol.Operator operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::muscle_manager_protocol::Operator>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Port::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.Port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Port.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .muscle_manager_protocol.Operator operator = 2;
  if (this->operator_() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operator_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.Port)
  return target;
}

size_t Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.Port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .muscle_manager_protocol.Operator operator = 2;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.Port)
  GOOGLE_DCHECK_NE(&from, this);
  const Port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.Port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.Port)
    MergeFrom(*source);
  }
}

void Port::MergeFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.Port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
}

void Port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Port::CopyFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  return true;
}

void Port::InternalSwap(Port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operator__, other->operator__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Port::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileEvent::InitAsDefaultInstance() {
  ::muscle_manager_protocol::_ProfileEvent_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::muscle_manager_protocol::_ProfileEvent_default_instance_._instance.get_mutable()->stop_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::muscle_manager_protocol::_ProfileEvent_default_instance_._instance.get_mutable()->port_ = const_cast< ::muscle_manager_protocol::Port*>(
      ::muscle_manager_protocol::Port::internal_default_instance());
}
class ProfileEvent::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const ProfileEvent* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& stop_time(const ProfileEvent* msg);
  static const ::muscle_manager_protocol::Port& port(const ProfileEvent* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ProfileEvent::_Internal::start_time(const ProfileEvent* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ProfileEvent::_Internal::stop_time(const ProfileEvent* msg) {
  return *msg->stop_time_;
}
const ::muscle_manager_protocol::Port&
ProfileEvent::_Internal::port(const ProfileEvent* msg) {
  return *msg->port_;
}
void ProfileEvent::clear_start_time() {
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void ProfileEvent::clear_stop_time() {
  if (GetArenaNoVirtual() == nullptr && stop_time_ != nullptr) {
    delete stop_time_;
  }
  stop_time_ = nullptr;
}
ProfileEvent::ProfileEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.ProfileEvent)
}
ProfileEvent::ProfileEvent(const ProfileEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance_id().empty()) {
    instance_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_stop_time()) {
    stop_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.stop_time_);
  } else {
    stop_time_ = nullptr;
  }
  if (from._internal_has_port()) {
    port_ = new ::muscle_manager_protocol::Port(*from.port_);
  } else {
    port_ = nullptr;
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(slot_));
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.ProfileEvent)
}

void ProfileEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(slot_));
}

ProfileEvent::~ProfileEvent() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.ProfileEvent)
  SharedDtor();
}

void ProfileEvent::SharedDtor() {
  instance_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete stop_time_;
  if (this != internal_default_instance()) delete port_;
}

void ProfileEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileEvent& ProfileEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileEvent_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void ProfileEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.ProfileEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stop_time_ != nullptr) {
    delete stop_time_;
  }
  stop_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && port_ != nullptr) {
    delete port_;
  }
  port_ = nullptr;
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(slot_));
  _internal_metadata_.Clear();
}

const char* ProfileEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_instance_id(), ptr, ctx, "muscle_manager_protocol.ProfileEvent.instance_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp stop_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .muscle_manager_protocol.ProfileEventType event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::muscle_manager_protocol::ProfileEventType>(val));
        } else goto handle_unusual;
        continue;
      // .muscle_manager_protocol.Port port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          port_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 message_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          message_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.ProfileEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.ProfileEvent.instance_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_id(), target);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp stop_time = 3;
  if (this->has_stop_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::stop_time(this), target, stream);
  }

  // .muscle_manager_protocol.ProfileEventType event_type = 4;
  if (this->event_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_type(), target);
  }

  // .muscle_manager_protocol.Port port = 5;
  if (this->has_port()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::port(this), target, stream);
  }

  // int32 port_length = 6;
  if (this->port_length() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_port_length(), target);
  }

  // int32 slot = 7;
  if (this->slot() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_slot(), target);
  }

  // int64 message_size = 8;
  if (this->message_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_message_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.ProfileEvent)
  return target;
}

size_t ProfileEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.ProfileEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_id = 1;
  if (this->instance_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_id());
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp stop_time = 3;
  if (this->has_stop_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_time_);
  }

  // .muscle_manager_protocol.Port port = 5;
  if (this->has_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *port_);
  }

  // .muscle_manager_protocol.ProfileEventType event_type = 4;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  // int32 port_length = 6;
  if (this->port_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_length());
  }

  // int64 message_size = 8;
  if (this->message_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_message_size());
  }

  // int32 slot = 7;
  if (this->slot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.ProfileEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.ProfileEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.ProfileEvent)
    MergeFrom(*source);
  }
}

void ProfileEvent::MergeFrom(const ProfileEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.ProfileEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_id().size() > 0) {

    instance_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_id_);
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_stop_time()) {
    _internal_mutable_stop_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_stop_time());
  }
  if (from.has_port()) {
    _internal_mutable_port()->::muscle_manager_protocol::Port::MergeFrom(from._internal_port());
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
  if (from.port_length() != 0) {
    _internal_set_port_length(from._internal_port_length());
  }
  if (from.message_size() != 0) {
    _internal_set_message_size(from._internal_message_size());
  }
  if (from.slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
}

void ProfileEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.ProfileEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileEvent::CopyFrom(const ProfileEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.ProfileEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileEvent::IsInitialized() const {
  return true;
}

void ProfileEvent::InternalSwap(ProfileEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_id_.Swap(&other->instance_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(stop_time_, other->stop_time_);
  swap(port_, other->port_);
  swap(event_type_, other->event_type_);
  swap(port_length_, other->port_length_);
  swap(message_size_, other->message_size_);
  swap(slot_, other->slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Profile::InitAsDefaultInstance() {
}
class Profile::_Internal {
 public:
};

Profile::Profile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.Profile)
}
Profile::Profile(const Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.Profile)
}

void Profile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.Profile)
  SharedDtor();
}

void Profile::SharedDtor() {
}

void Profile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profile& Profile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Profile_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear();
}

const char* Profile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .muscle_manager_protocol.ProfileEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Profile::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ProfileEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.Profile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ProfileEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Profile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.Profile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.Profile)
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void Profile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::InternalSwap(Profile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileResult::InitAsDefaultInstance() {
}
class ProfileResult::_Internal {
 public:
};

ProfileResult::ProfileResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.ProfileResult)
}
ProfileResult::ProfileResult(const ProfileResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.ProfileResult)
}

void ProfileResult::SharedCtor() {
}

ProfileResult::~ProfileResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.ProfileResult)
  SharedDtor();
}

void ProfileResult::SharedDtor() {
}

void ProfileResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileResult& ProfileResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void ProfileResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.ProfileResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ProfileResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.ProfileResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.ProfileResult)
  return target;
}

size_t ProfileResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.ProfileResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.ProfileResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.ProfileResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.ProfileResult)
    MergeFrom(*source);
  }
}

void ProfileResult::MergeFrom(const ProfileResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.ProfileResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProfileResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.ProfileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileResult::CopyFrom(const ProfileResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.ProfileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileResult::IsInitialized() const {
  return true;
}

void ProfileResult::InternalSwap(ProfileResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegistrationRequest::InitAsDefaultInstance() {
}
class RegistrationRequest::_Internal {
 public:
};

RegistrationRequest::RegistrationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.RegistrationRequest)
}
RegistrationRequest::RegistrationRequest(const RegistrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      network_locations_(from.network_locations_),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance_name().empty()) {
    instance_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.RegistrationRequest)
}

void RegistrationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegistrationRequest::~RegistrationRequest() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.RegistrationRequest)
  SharedDtor();
}

void RegistrationRequest::SharedDtor() {
  instance_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegistrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationRequest& RegistrationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void RegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.RegistrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_locations_.Clear();
  ports_.Clear();
  instance_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegistrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_instance_name(), ptr, ctx, "muscle_manager_protocol.RegistrationRequest.instance_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string network_locations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_network_locations(), ptr, ctx, "muscle_manager_protocol.RegistrationRequest.network_locations");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .muscle_manager_protocol.Port ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegistrationRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.RegistrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.RegistrationRequest.instance_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_name(), target);
  }

  // repeated string network_locations = 2;
  for (int i = 0, n = this->_internal_network_locations_size(); i < n; i++) {
    const auto& s = this->_internal_network_locations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.RegistrationRequest.network_locations");
    target = stream->WriteString(2, s, target);
  }

  // repeated .muscle_manager_protocol.Port ports = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ports_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_ports(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.RegistrationRequest)
  return target;
}

size_t RegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.RegistrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string network_locations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(network_locations_.size());
  for (int i = 0, n = network_locations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      network_locations_.Get(i));
  }

  // repeated .muscle_manager_protocol.Port ports = 3;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.RegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistrationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegistrationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.RegistrationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.RegistrationRequest)
    MergeFrom(*source);
  }
}

void RegistrationRequest::MergeFrom(const RegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.RegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  network_locations_.MergeFrom(from.network_locations_);
  ports_.MergeFrom(from.ports_);
  if (from.instance_name().size() > 0) {

    instance_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
}

void RegistrationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.RegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationRequest::CopyFrom(const RegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.RegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationRequest::IsInitialized() const {
  return true;
}

void RegistrationRequest::InternalSwap(RegistrationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  network_locations_.InternalSwap(&other->network_locations_);
  ports_.InternalSwap(&other->ports_);
  instance_name_.Swap(&other->instance_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegistrationResult::InitAsDefaultInstance() {
}
class RegistrationResult::_Internal {
 public:
};

RegistrationResult::RegistrationResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.RegistrationResult)
}
RegistrationResult::RegistrationResult(const RegistrationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.RegistrationResult)
}

void RegistrationResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

RegistrationResult::~RegistrationResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.RegistrationResult)
  SharedDtor();
}

void RegistrationResult::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegistrationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationResult& RegistrationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void RegistrationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.RegistrationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* RegistrationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .muscle_manager_protocol.ResultStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::muscle_manager_protocol::ResultStatus>(val));
        } else goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_error_message(), ptr, ctx, "muscle_manager_protocol.RegistrationResult.error_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegistrationResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.RegistrationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.RegistrationResult.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.RegistrationResult)
  return target;
}

size_t RegistrationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.RegistrationResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.RegistrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistrationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegistrationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.RegistrationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.RegistrationResult)
    MergeFrom(*source);
  }
}

void RegistrationResult::MergeFrom(const RegistrationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.RegistrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RegistrationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.RegistrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationResult::CopyFrom(const RegistrationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.RegistrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationResult::IsInitialized() const {
  return true;
}

void RegistrationResult::InternalSwap(RegistrationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Conduit::InitAsDefaultInstance() {
}
class Conduit::_Internal {
 public:
};

Conduit::Conduit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.Conduit)
}
Conduit::Conduit(const Conduit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender().empty()) {
    sender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver().empty()) {
    receiver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.Conduit)
}

void Conduit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Conduit::~Conduit() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.Conduit)
  SharedDtor();
}

void Conduit::SharedDtor() {
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Conduit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conduit& Conduit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conduit_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void Conduit::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.Conduit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Conduit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_sender(), ptr, ctx, "muscle_manager_protocol.Conduit.sender");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_receiver(), ptr, ctx, "muscle_manager_protocol.Conduit.receiver");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conduit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.Conduit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Conduit.sender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // string receiver = 2;
  if (this->receiver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Conduit.receiver");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receiver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.Conduit)
  return target;
}

size_t Conduit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.Conduit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string receiver = 2;
  if (this->receiver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conduit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.Conduit)
  GOOGLE_DCHECK_NE(&from, this);
  const Conduit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conduit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.Conduit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.Conduit)
    MergeFrom(*source);
  }
}

void Conduit::MergeFrom(const Conduit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.Conduit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.receiver().size() > 0) {

    receiver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_);
  }
}

void Conduit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.Conduit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conduit::CopyFrom(const Conduit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.Conduit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conduit::IsInitialized() const {
  return true;
}

void Conduit::InternalSwap(Conduit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sender_.Swap(&other->sender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  receiver_.Swap(&other->receiver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Conduit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerRequest::InitAsDefaultInstance() {
}
class PeerRequest::_Internal {
 public:
};

PeerRequest::PeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.PeerRequest)
}
PeerRequest::PeerRequest(const PeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance_name().empty()) {
    instance_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.PeerRequest)
}

void PeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PeerRequest::~PeerRequest() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.PeerRequest)
  SharedDtor();
}

void PeerRequest::SharedDtor() {
  instance_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerRequest& PeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void PeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.PeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_instance_name(), ptr, ctx, "muscle_manager_protocol.PeerRequest.instance_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.PeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerRequest.instance_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.PeerRequest)
  return target;
}

size_t PeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.PeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.PeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.PeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.PeerRequest)
    MergeFrom(*source);
  }
}

void PeerRequest::MergeFrom(const PeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.PeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_name().size() > 0) {

    instance_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
}

void PeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.PeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerRequest::CopyFrom(const PeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.PeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerRequest::IsInitialized() const {
  return true;
}

void PeerRequest::InternalSwap(PeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_name_.Swap(&other->instance_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerResult_PeerDimensions::InitAsDefaultInstance() {
}
class PeerResult_PeerDimensions::_Internal {
 public:
};

PeerResult_PeerDimensions::PeerResult_PeerDimensions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.PeerResult.PeerDimensions)
}
PeerResult_PeerDimensions::PeerResult_PeerDimensions(const PeerResult_PeerDimensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_name().empty()) {
    peer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.PeerResult.PeerDimensions)
}

void PeerResult_PeerDimensions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  peer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PeerResult_PeerDimensions::~PeerResult_PeerDimensions() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.PeerResult.PeerDimensions)
  SharedDtor();
}

void PeerResult_PeerDimensions::SharedDtor() {
  peer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerResult_PeerDimensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerResult_PeerDimensions& PeerResult_PeerDimensions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerResult_PeerDimensions_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void PeerResult_PeerDimensions::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  peer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PeerResult_PeerDimensions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string peer_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_peer_name(), ptr, ctx, "muscle_manager_protocol.PeerResult.PeerDimensions.peer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerResult_PeerDimensions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string peer_name = 1;
  if (this->peer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_name().data(), static_cast<int>(this->_internal_peer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.PeerDimensions.peer_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_peer_name(), target);
  }

  // repeated int32 dimensions = 2;
  {
    int byte_size = _dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_dimensions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.PeerResult.PeerDimensions)
  return target;
}

size_t PeerResult_PeerDimensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dimensions = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string peer_name = 1;
  if (this->peer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerResult_PeerDimensions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerResult_PeerDimensions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerResult_PeerDimensions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.PeerResult.PeerDimensions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.PeerResult.PeerDimensions)
    MergeFrom(*source);
  }
}

void PeerResult_PeerDimensions::MergeFrom(const PeerResult_PeerDimensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  if (from.peer_name().size() > 0) {

    peer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_name_);
  }
}

void PeerResult_PeerDimensions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerResult_PeerDimensions::CopyFrom(const PeerResult_PeerDimensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.PeerResult.PeerDimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerResult_PeerDimensions::IsInitialized() const {
  return true;
}

void PeerResult_PeerDimensions::InternalSwap(PeerResult_PeerDimensions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimensions_.InternalSwap(&other->dimensions_);
  peer_name_.Swap(&other->peer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerResult_PeerDimensions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerResult_PeerLocations::InitAsDefaultInstance() {
}
class PeerResult_PeerLocations::_Internal {
 public:
};

PeerResult_PeerLocations::PeerResult_PeerLocations()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.PeerResult.PeerLocations)
}
PeerResult_PeerLocations::PeerResult_PeerLocations(const PeerResult_PeerLocations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance_name().empty()) {
    instance_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.PeerResult.PeerLocations)
}

void PeerResult_PeerLocations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PeerResult_PeerLocations::~PeerResult_PeerLocations() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.PeerResult.PeerLocations)
  SharedDtor();
}

void PeerResult_PeerLocations::SharedDtor() {
  instance_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerResult_PeerLocations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerResult_PeerLocations& PeerResult_PeerLocations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerResult_PeerLocations_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void PeerResult_PeerLocations::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.PeerResult.PeerLocations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  instance_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PeerResult_PeerLocations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_instance_name(), ptr, ctx, "muscle_manager_protocol.PeerResult.PeerLocations.instance_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string locations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_locations(), ptr, ctx, "muscle_manager_protocol.PeerResult.PeerLocations.locations");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerResult_PeerLocations::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.PeerResult.PeerLocations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.PeerLocations.instance_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_name(), target);
  }

  // repeated string locations = 2;
  for (int i = 0, n = this->_internal_locations_size(); i < n; i++) {
    const auto& s = this->_internal_locations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.PeerLocations.locations");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.PeerResult.PeerLocations)
  return target;
}

size_t PeerResult_PeerLocations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.PeerResult.PeerLocations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string locations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(locations_.size());
  for (int i = 0, n = locations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      locations_.Get(i));
  }

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerResult_PeerLocations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.PeerResult.PeerLocations)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerResult_PeerLocations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerResult_PeerLocations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.PeerResult.PeerLocations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.PeerResult.PeerLocations)
    MergeFrom(*source);
  }
}

void PeerResult_PeerLocations::MergeFrom(const PeerResult_PeerLocations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.PeerResult.PeerLocations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  if (from.instance_name().size() > 0) {

    instance_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
}

void PeerResult_PeerLocations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.PeerResult.PeerLocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerResult_PeerLocations::CopyFrom(const PeerResult_PeerLocations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.PeerResult.PeerLocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerResult_PeerLocations::IsInitialized() const {
  return true;
}

void PeerResult_PeerLocations::InternalSwap(PeerResult_PeerLocations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  locations_.InternalSwap(&other->locations_);
  instance_name_.Swap(&other->instance_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerResult_PeerLocations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerResult::InitAsDefaultInstance() {
}
class PeerResult::_Internal {
 public:
};

PeerResult::PeerResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.PeerResult)
}
PeerResult::PeerResult(const PeerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      conduits_(from.conduits_),
      peer_dimensions_(from.peer_dimensions_),
      peer_locations_(from.peer_locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.PeerResult)
}

void PeerResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

PeerResult::~PeerResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.PeerResult)
  SharedDtor();
}

void PeerResult::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerResult& PeerResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void PeerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.PeerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conduits_.Clear();
  peer_dimensions_.Clear();
  peer_locations_.Clear();
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* PeerResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .muscle_manager_protocol.ResultStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::muscle_manager_protocol::ResultStatus>(val));
        } else goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_error_message(), ptr, ctx, "muscle_manager_protocol.PeerResult.error_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .muscle_manager_protocol.Conduit conduits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conduits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peer_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peer_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.PeerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.PeerResult.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // repeated .muscle_manager_protocol.Conduit conduits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conduits_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_conduits(i), target, stream);
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peer_dimensions_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_peer_dimensions(i), target, stream);
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peer_locations_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_peer_locations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.PeerResult)
  return target;
}

size_t PeerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.PeerResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.Conduit conduits = 3;
  total_size += 1UL * this->_internal_conduits_size();
  for (const auto& msg : this->conduits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerDimensions peer_dimensions = 4;
  total_size += 1UL * this->_internal_peer_dimensions_size();
  for (const auto& msg : this->peer_dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .muscle_manager_protocol.PeerResult.PeerLocations peer_locations = 5;
  total_size += 1UL * this->_internal_peer_locations_size();
  for (const auto& msg : this->peer_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.PeerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.PeerResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.PeerResult)
    MergeFrom(*source);
  }
}

void PeerResult::MergeFrom(const PeerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.PeerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conduits_.MergeFrom(from.conduits_);
  peer_dimensions_.MergeFrom(from.peer_dimensions_);
  peer_locations_.MergeFrom(from.peer_locations_);
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PeerResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.PeerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerResult::CopyFrom(const PeerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.PeerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerResult::IsInitialized() const {
  return true;
}

void PeerResult::InternalSwap(PeerResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  conduits_.InternalSwap(&other->conduits_);
  peer_dimensions_.InternalSwap(&other->peer_dimensions_);
  peer_locations_.InternalSwap(&other->peer_locations_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOfDouble::InitAsDefaultInstance() {
}
class ListOfDouble::_Internal {
 public:
};

ListOfDouble::ListOfDouble()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.ListOfDouble)
}
ListOfDouble::ListOfDouble(const ListOfDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.ListOfDouble)
}

void ListOfDouble::SharedCtor() {
}

ListOfDouble::~ListOfDouble() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.ListOfDouble)
  SharedDtor();
}

void ListOfDouble::SharedDtor() {
}

void ListOfDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOfDouble& ListOfDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void ListOfDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.ListOfDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

const char* ListOfDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOfDouble::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.ListOfDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.ListOfDouble)
  return target;
}

size_t ListOfDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.ListOfDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOfDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.ListOfDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOfDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOfDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.ListOfDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.ListOfDouble)
    MergeFrom(*source);
  }
}

void ListOfDouble::MergeFrom(const ListOfDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.ListOfDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListOfDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.ListOfDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOfDouble::CopyFrom(const ListOfDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.ListOfDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOfDouble::IsInitialized() const {
  return true;
}

void ListOfDouble::InternalSwap(ListOfDouble* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOfDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOfListOfDouble::InitAsDefaultInstance() {
}
class ListOfListOfDouble::_Internal {
 public:
};

ListOfListOfDouble::ListOfListOfDouble()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.ListOfListOfDouble)
}
ListOfListOfDouble::ListOfListOfDouble(const ListOfListOfDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.ListOfListOfDouble)
}

void ListOfListOfDouble::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
}

ListOfListOfDouble::~ListOfListOfDouble() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.ListOfListOfDouble)
  SharedDtor();
}

void ListOfListOfDouble::SharedDtor() {
}

void ListOfListOfDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOfListOfDouble& ListOfListOfDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOfListOfDouble_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void ListOfListOfDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.ListOfListOfDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

const char* ListOfListOfDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .muscle_manager_protocol.ListOfDouble values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOfListOfDouble::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.ListOfListOfDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ListOfDouble values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.ListOfListOfDouble)
  return target;
}

size_t ListOfListOfDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.ListOfListOfDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.ListOfDouble values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOfListOfDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.ListOfListOfDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOfListOfDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOfListOfDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.ListOfListOfDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.ListOfListOfDouble)
    MergeFrom(*source);
  }
}

void ListOfListOfDouble::MergeFrom(const ListOfListOfDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.ListOfListOfDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListOfListOfDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.ListOfListOfDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOfListOfDouble::CopyFrom(const ListOfListOfDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.ListOfListOfDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOfListOfDouble::IsInitialized() const {
  return true;
}

void ListOfListOfDouble::InternalSwap(ListOfListOfDouble* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOfListOfDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Setting::InitAsDefaultInstance() {
  ::muscle_manager_protocol::_Setting_default_instance_._instance.get_mutable()->value_list_float_ = const_cast< ::muscle_manager_protocol::ListOfDouble*>(
      ::muscle_manager_protocol::ListOfDouble::internal_default_instance());
  ::muscle_manager_protocol::_Setting_default_instance_._instance.get_mutable()->value_list_list_float_ = const_cast< ::muscle_manager_protocol::ListOfListOfDouble*>(
      ::muscle_manager_protocol::ListOfListOfDouble::internal_default_instance());
}
class Setting::_Internal {
 public:
  static const ::muscle_manager_protocol::ListOfDouble& value_list_float(const Setting* msg);
  static const ::muscle_manager_protocol::ListOfListOfDouble& value_list_list_float(const Setting* msg);
};

const ::muscle_manager_protocol::ListOfDouble&
Setting::_Internal::value_list_float(const Setting* msg) {
  return *msg->value_list_float_;
}
const ::muscle_manager_protocol::ListOfListOfDouble&
Setting::_Internal::value_list_list_float(const Setting* msg) {
  return *msg->value_list_list_float_;
}
Setting::Setting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.Setting)
}
Setting::Setting(const Setting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_string().empty()) {
    value_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_string_);
  }
  if (from._internal_has_value_list_float()) {
    value_list_float_ = new ::muscle_manager_protocol::ListOfDouble(*from.value_list_float_);
  } else {
    value_list_float_ = nullptr;
  }
  if (from._internal_has_value_list_list_float()) {
    value_list_list_float_ = new ::muscle_manager_protocol::ListOfListOfDouble(*from.value_list_list_float_);
  } else {
    value_list_list_float_ = nullptr;
  }
  ::memcpy(&value_int_, &from.value_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_float_) -
    reinterpret_cast<char*>(&value_int_)) + sizeof(value_float_));
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.Setting)
}

void Setting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_list_float_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_float_) -
      reinterpret_cast<char*>(&value_list_float_)) + sizeof(value_float_));
}

Setting::~Setting() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.Setting)
  SharedDtor();
}

void Setting::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_list_float_;
  if (this != internal_default_instance()) delete value_list_list_float_;
}

void Setting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Setting& Setting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Setting_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.Setting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_list_float_ != nullptr) {
    delete value_list_float_;
  }
  value_list_float_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_list_list_float_ != nullptr) {
    delete value_list_list_float_;
  }
  value_list_list_float_ = nullptr;
  ::memset(&value_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_float_) -
      reinterpret_cast<char*>(&value_int_)) + sizeof(value_float_));
  _internal_metadata_.Clear();
}

const char* Setting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "muscle_manager_protocol.Setting.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .muscle_manager_protocol.SettingValueType value_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_value_type(static_cast<::muscle_manager_protocol::SettingValueType>(val));
        } else goto handle_unusual;
        continue;
      // string value_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_value_string(), ptr, ctx, "muscle_manager_protocol.Setting.value_string");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value_int = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          value_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          value_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool value_bool = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          value_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .muscle_manager_protocol.ListOfDouble value_list_float = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_list_float(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_list_list_float(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Setting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.Setting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Setting.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .muscle_manager_protocol.SettingValueType value_type = 2;
  if (this->value_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_value_type(), target);
  }

  // string value_string = 3;
  if (this->value_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_string().data(), static_cast<int>(this->_internal_value_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.Setting.value_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value_string(), target);
  }

  // int64 value_int = 4;
  if (this->value_int() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_value_int(), target);
  }

  // double value_float = 5;
  if (!(this->value_float() <= 0 && this->value_float() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_value_float(), target);
  }

  // bool value_bool = 6;
  if (this->value_bool() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_value_bool(), target);
  }

  // .muscle_manager_protocol.ListOfDouble value_list_float = 7;
  if (this->has_value_list_float()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::value_list_float(this), target, stream);
  }

  // .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
  if (this->has_value_list_list_float()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::value_list_list_float(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.Setting)
  return target;
}

size_t Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.Setting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value_string = 3;
  if (this->value_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_string());
  }

  // .muscle_manager_protocol.ListOfDouble value_list_float = 7;
  if (this->has_value_list_float()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_list_float_);
  }

  // .muscle_manager_protocol.ListOfListOfDouble value_list_list_float = 8;
  if (this->has_value_list_list_float()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_list_list_float_);
  }

  // int64 value_int = 4;
  if (this->value_int() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value_int());
  }

  // .muscle_manager_protocol.SettingValueType value_type = 2;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  // bool value_bool = 6;
  if (this->value_bool() != 0) {
    total_size += 1 + 1;
  }

  // double value_float = 5;
  if (!(this->value_float() <= 0 && this->value_float() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Setting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  const Setting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Setting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.Setting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.Setting)
    MergeFrom(*source);
  }
}

void Setting::MergeFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value_string().size() > 0) {

    value_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_string_);
  }
  if (from.has_value_list_float()) {
    _internal_mutable_value_list_float()->::muscle_manager_protocol::ListOfDouble::MergeFrom(from._internal_value_list_float());
  }
  if (from.has_value_list_list_float()) {
    _internal_mutable_value_list_list_float()->::muscle_manager_protocol::ListOfListOfDouble::MergeFrom(from._internal_value_list_list_float());
  }
  if (from.value_int() != 0) {
    _internal_set_value_int(from._internal_value_int());
  }
  if (from.value_type() != 0) {
    _internal_set_value_type(from._internal_value_type());
  }
  if (from.value_bool() != 0) {
    _internal_set_value_bool(from._internal_value_bool());
  }
  if (!(from.value_float() <= 0 && from.value_float() >= 0)) {
    _internal_set_value_float(from._internal_value_float());
  }
}

void Setting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Setting::CopyFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setting::IsInitialized() const {
  return true;
}

void Setting::InternalSwap(Setting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_string_.Swap(&other->value_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_list_float_, other->value_list_float_);
  swap(value_list_list_float_, other->value_list_list_float_);
  swap(value_int_, other->value_int_);
  swap(value_type_, other->value_type_);
  swap(value_bool_, other->value_bool_);
  swap(value_float_, other->value_float_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Setting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SettingsRequest::InitAsDefaultInstance() {
}
class SettingsRequest::_Internal {
 public:
};

SettingsRequest::SettingsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.SettingsRequest)
}
SettingsRequest::SettingsRequest(const SettingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.SettingsRequest)
}

void SettingsRequest::SharedCtor() {
}

SettingsRequest::~SettingsRequest() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.SettingsRequest)
  SharedDtor();
}

void SettingsRequest::SharedDtor() {
}

void SettingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsRequest& SettingsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettingsRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void SettingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.SettingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SettingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettingsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.SettingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.SettingsRequest)
  return target;
}

size_t SettingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.SettingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.SettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.SettingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.SettingsRequest)
    MergeFrom(*source);
  }
}

void SettingsRequest::MergeFrom(const SettingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.SettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SettingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.SettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsRequest::CopyFrom(const SettingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.SettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsRequest::IsInitialized() const {
  return true;
}

void SettingsRequest::InternalSwap(SettingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SettingsResult::InitAsDefaultInstance() {
}
class SettingsResult::_Internal {
 public:
};

SettingsResult::SettingsResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.SettingsResult)
}
SettingsResult::SettingsResult(const SettingsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      setting_values_(from.setting_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.SettingsResult)
}

void SettingsResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
}

SettingsResult::~SettingsResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.SettingsResult)
  SharedDtor();
}

void SettingsResult::SharedDtor() {
}

void SettingsResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsResult& SettingsResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettingsResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void SettingsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.SettingsResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setting_values_.Clear();
  _internal_metadata_.Clear();
}

const char* SettingsResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .muscle_manager_protocol.Setting setting_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_setting_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettingsResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.SettingsResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.Setting setting_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_setting_values_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_setting_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.SettingsResult)
  return target;
}

size_t SettingsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.SettingsResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .muscle_manager_protocol.Setting setting_values = 1;
  total_size += 1UL * this->_internal_setting_values_size();
  for (const auto& msg : this->setting_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.SettingsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettingsResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.SettingsResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.SettingsResult)
    MergeFrom(*source);
  }
}

void SettingsResult::MergeFrom(const SettingsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.SettingsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  setting_values_.MergeFrom(from.setting_values_);
}

void SettingsResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.SettingsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsResult::CopyFrom(const SettingsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.SettingsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsResult::IsInitialized() const {
  return true;
}

void SettingsResult::InternalSwap(SettingsResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  setting_values_.InternalSwap(&other->setting_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeregistrationRequest::InitAsDefaultInstance() {
}
class DeregistrationRequest::_Internal {
 public:
};

DeregistrationRequest::DeregistrationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.DeregistrationRequest)
}
DeregistrationRequest::DeregistrationRequest(const DeregistrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance_name().empty()) {
    instance_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.DeregistrationRequest)
}

void DeregistrationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  instance_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeregistrationRequest::~DeregistrationRequest() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.DeregistrationRequest)
  SharedDtor();
}

void DeregistrationRequest::SharedDtor() {
  instance_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeregistrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeregistrationRequest& DeregistrationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeregistrationRequest_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void DeregistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.DeregistrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeregistrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_instance_name(), ptr, ctx, "muscle_manager_protocol.DeregistrationRequest.instance_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeregistrationRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.DeregistrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.DeregistrationRequest.instance_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.DeregistrationRequest)
  return target;
}

size_t DeregistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.DeregistrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeregistrationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.DeregistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregistrationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeregistrationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.DeregistrationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.DeregistrationRequest)
    MergeFrom(*source);
  }
}

void DeregistrationRequest::MergeFrom(const DeregistrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.DeregistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_name().size() > 0) {

    instance_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
}

void DeregistrationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.DeregistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregistrationRequest::CopyFrom(const DeregistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.DeregistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregistrationRequest::IsInitialized() const {
  return true;
}

void DeregistrationRequest::InternalSwap(DeregistrationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_name_.Swap(&other->instance_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeregistrationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeregistrationResult::InitAsDefaultInstance() {
}
class DeregistrationResult::_Internal {
 public:
};

DeregistrationResult::DeregistrationResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muscle_manager_protocol.DeregistrationResult)
}
DeregistrationResult::DeregistrationResult(const DeregistrationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:muscle_manager_protocol.DeregistrationResult)
}

void DeregistrationResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

DeregistrationResult::~DeregistrationResult() {
  // @@protoc_insertion_point(destructor:muscle_manager_protocol.DeregistrationResult)
  SharedDtor();
}

void DeregistrationResult::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeregistrationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeregistrationResult& DeregistrationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeregistrationResult_muscle_5fmanager_5fprotocol_2fmuscle_5fmanager_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void DeregistrationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:muscle_manager_protocol.DeregistrationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* DeregistrationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .muscle_manager_protocol.ResultStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::muscle_manager_protocol::ResultStatus>(val));
        } else goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_error_message(), ptr, ctx, "muscle_manager_protocol.DeregistrationResult.error_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeregistrationResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muscle_manager_protocol.DeregistrationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muscle_manager_protocol.DeregistrationResult.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muscle_manager_protocol.DeregistrationResult)
  return target;
}

size_t DeregistrationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muscle_manager_protocol.DeregistrationResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .muscle_manager_protocol.ResultStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeregistrationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muscle_manager_protocol.DeregistrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregistrationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeregistrationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muscle_manager_protocol.DeregistrationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muscle_manager_protocol.DeregistrationResult)
    MergeFrom(*source);
  }
}

void DeregistrationResult::MergeFrom(const DeregistrationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muscle_manager_protocol.DeregistrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DeregistrationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muscle_manager_protocol.DeregistrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregistrationResult::CopyFrom(const DeregistrationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muscle_manager_protocol.DeregistrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregistrationResult::IsInitialized() const {
  return true;
}

void DeregistrationResult::InternalSwap(DeregistrationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeregistrationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace muscle_manager_protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::LogMessage* Arena::CreateMaybeMessage< ::muscle_manager_protocol::LogMessage >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::LogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::LogResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::LogResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::LogResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::Port* Arena::CreateMaybeMessage< ::muscle_manager_protocol::Port >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::Port >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::ProfileEvent* Arena::CreateMaybeMessage< ::muscle_manager_protocol::ProfileEvent >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::ProfileEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::Profile* Arena::CreateMaybeMessage< ::muscle_manager_protocol::Profile >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::ProfileResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::ProfileResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::ProfileResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::RegistrationRequest* Arena::CreateMaybeMessage< ::muscle_manager_protocol::RegistrationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::RegistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::RegistrationResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::RegistrationResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::RegistrationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::Conduit* Arena::CreateMaybeMessage< ::muscle_manager_protocol::Conduit >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::Conduit >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::PeerRequest* Arena::CreateMaybeMessage< ::muscle_manager_protocol::PeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::PeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::PeerResult_PeerDimensions* Arena::CreateMaybeMessage< ::muscle_manager_protocol::PeerResult_PeerDimensions >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::PeerResult_PeerDimensions >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::PeerResult_PeerLocations* Arena::CreateMaybeMessage< ::muscle_manager_protocol::PeerResult_PeerLocations >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::PeerResult_PeerLocations >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::PeerResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::PeerResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::PeerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::ListOfDouble* Arena::CreateMaybeMessage< ::muscle_manager_protocol::ListOfDouble >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::ListOfDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::ListOfListOfDouble* Arena::CreateMaybeMessage< ::muscle_manager_protocol::ListOfListOfDouble >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::ListOfListOfDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::Setting* Arena::CreateMaybeMessage< ::muscle_manager_protocol::Setting >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::Setting >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::SettingsRequest* Arena::CreateMaybeMessage< ::muscle_manager_protocol::SettingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::SettingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::SettingsResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::SettingsResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::SettingsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::DeregistrationRequest* Arena::CreateMaybeMessage< ::muscle_manager_protocol::DeregistrationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::DeregistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muscle_manager_protocol::DeregistrationResult* Arena::CreateMaybeMessage< ::muscle_manager_protocol::DeregistrationResult >(Arena* arena) {
  return Arena::CreateInternal< ::muscle_manager_protocol::DeregistrationResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
